name: Create Tag on Merge and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  create_tag:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create and push new tag
        id: create-tag
        run: |
          npm run create-tag

      - name: Get latest commit
        id: get-commit
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Check for associated pull request
        id: get-pr
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commits = await github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.get-commit.outputs.sha }}'
            });
            const commit = commits.data[0];
            console.log(commit);
            const prs = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: commit.committer.login + ':' + commit.sha
            });
            console.log(prs.data);
            return prs.data.length > 0 ? prs.data[0].number : '';

      - name: Check for auto-deploy label
        if: steps.get-pr.outputs.result != ''
        id: check-label
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.get-pr.outputs.result }}
            });
            const labels = pr.data.labels.map(label => label.name);
            return labels.includes('auto-deploy');

      - name: Create GitHub Release
        if: steps.check-label.outputs.result == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ steps.create-tag.outputs.new_tag }}
        run: |
          gh release create $NEW_TAG --generate-notes
